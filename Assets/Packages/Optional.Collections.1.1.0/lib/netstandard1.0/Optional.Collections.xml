<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Optional.Collections</name>
    </assembly>
    <members>
        <member name="M:Optional.Collections.DictionaryExtensions.GetValueOrNone``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},``0)">
            <summary>
            Returns the value associated with the specified key if such exists.
            A dictionary lookup will be used if available, otherwise falling
            back to a linear scan of the enumerable.
            </summary>
            <param name="source">The dictionary or enumerable in which to locate the key.</param>
            <param name="key">The key to locate.</param>
            <returns>An Option&lt;TValue&gt; instance containing the associated value if located.</returns>
        </member>
        <member name="M:Optional.Collections.LinqEnumerableExtensions.FirstOrNone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element of a sequence if such exists.
            </summary>
            <param name="source">The sequence to return the first element from.</param>
            <returns>An Option&lt;T&gt; instance containing the first element if present.</returns>
        </member>
        <member name="M:Optional.Collections.LinqEnumerableExtensions.FirstOrNone``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element of a sequence, satisfying a specified predicate, 
            if such exists.
            </summary>
            <param name="source">The sequence to return the first element from.</param>
            <param name="predicate">The predicate to filter by.</param>
            <returns>An Option&lt;T&gt; instance containing the first element if present.</returns>
        </member>
        <member name="M:Optional.Collections.LinqEnumerableExtensions.LastOrNone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the last element of a sequence if such exists.
            </summary>
            <param name="source">The sequence to return the last element from.</param>
            <returns>An Option&lt;T&gt; instance containing the last element if present.</returns>
        </member>
        <member name="M:Optional.Collections.LinqEnumerableExtensions.LastOrNone``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of a sequence, satisfying a specified predicate, 
            if such exists.
            </summary>
            <param name="source">The sequence to return the last element from.</param>
            <param name="predicate">The predicate to filter by.</param>
            <returns>An Option&lt;T&gt; instance containing the last element if present.</returns>
        </member>
        <member name="M:Optional.Collections.LinqEnumerableExtensions.SingleOrNone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a single element from a sequence, if it exists 
            and is the only element in the sequence.
            </summary>
            <param name="source">The sequence to return the element from.</param>
            <returns>An Option&lt;T&gt; instance containing the element if present.</returns>
        </member>
        <member name="M:Optional.Collections.LinqEnumerableExtensions.SingleOrNone``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns a single element from a sequence, satisfying a specified predicate, 
            if it exists and is the only element in the sequence.
            </summary>
            <param name="source">The sequence to return the element from.</param>
            <param name="predicate">The predicate to filter by.</param>
            <returns>An Option&lt;T&gt; instance containing the element if present.</returns>
        </member>
        <member name="M:Optional.Collections.LinqEnumerableExtensions.ElementAtOrNone``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns an element at a specified position in a sequence if such exists.
            </summary>
            <param name="source">The sequence to return the element from.</param>
            <param name="index">The index in the sequence.</param>
            <returns>An Option&lt;T&gt; instance containing the element if found.</returns>
        </member>
        <member name="M:Optional.Collections.LinqQueryableExtensions.FirstOrNone``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns the first element of a sequence if such exists.
            </summary>
            <param name="source">The sequence to return the first element from.</param>
            <returns>An Option&lt;T&gt; instance containing the first element if present.</returns>
        </member>
        <member name="M:Optional.Collections.LinqQueryableExtensions.FirstOrNone``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns the first element of a sequence, satisfying a specified predicate, 
            if such exists.
            </summary>
            <param name="source">The sequence to return the first element from.</param>
            <param name="predicate">The predicate to filter by.</param>
            <returns>An Option&lt;T&gt; instance containing the first element if present.</returns>
        </member>
        <member name="M:Optional.Collections.LinqQueryableExtensions.LastOrNone``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns the last element of a sequence if such exists.
            </summary>
            <param name="source">The sequence to return the last element from.</param>
            <returns>An Option&lt;T&gt; instance containing the last element if present.</returns>
        </member>
        <member name="M:Optional.Collections.LinqQueryableExtensions.LastOrNone``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns the last element of a sequence, satisfying a specified predicate, 
            if such exists.
            </summary>
            <param name="source">The sequence to return the last element from.</param>
            <param name="predicate">The predicate to filter by.</param>
            <returns>An Option&lt;T&gt; instance containing the last element if present.</returns>
        </member>
        <member name="M:Optional.Collections.LinqQueryableExtensions.SingleOrNone``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns a single element from a sequence, if it exists 
            and is the only element in the sequence.
            </summary>
            <param name="source">The sequence to return the element from.</param>
            <returns>An Option&lt;T&gt; instance containing the element if present.</returns>
        </member>
        <member name="M:Optional.Collections.LinqQueryableExtensions.SingleOrNone``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a single element from a sequence, satisfying a specified predicate, 
            if it exists and is the only element in the sequence.
            </summary>
            <param name="source">The sequence to return the element from.</param>
            <param name="predicate">The predicate to filter by.</param>
            <returns>An Option&lt;T&gt; instance containing the element if present.</returns>
        </member>
        <member name="M:Optional.Collections.LinqQueryableExtensions.ElementAtOrNone``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Returns an element at a specified position in a sequence if such exists.
            </summary>
            <param name="source">The sequence to return the element from.</param>
            <param name="index">The index in the sequence.</param>
            <returns>An Option&lt;T&gt; instance containing the element if found.</returns>
        </member>
    </members>
</doc>
