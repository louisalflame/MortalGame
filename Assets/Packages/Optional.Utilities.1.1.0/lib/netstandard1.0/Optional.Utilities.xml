<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Optional.Utilities</name>
    </assembly>
    <members>
        <member name="T:Optional.Utilities.Parse">
            <summary>
            A collection of static helper methods, for parsing strings into simple types.
            </summary>
        </member>
        <member name="M:Optional.Utilities.Parse.ToByte(System.String)">
            <summary>
            Tries to parse a string into a byte.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToByte(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
            Tries to parse a string into a byte.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToSByte(System.String)">
            <summary>
            Tries to parse a string into a signed byte.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToSByte(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
            Tries to parse a string into a signed byte.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToShort(System.String)">
            <summary>
            Tries to parse a string into a short.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToShort(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
            Tries to parse a string into a short.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToUShort(System.String)">
            <summary>
            Tries to parse a string into an unsigned short.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToUShort(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
            Tries to parse a string into an unsigned short.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToInt(System.String)">
            <summary>
            Tries to parse a string into an int.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToInt(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
            Tries to parse a string into an int.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToUInt(System.String)">
            <summary>
            Tries to parse a string into an unsigned int.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToUInt(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
            Tries to parse a string into an unsigned int.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToLong(System.String)">
            <summary>
            Tries to parse a string into a long.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToLong(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
            Tries to parse a string into a long.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToULong(System.String)">
            <summary>
            Tries to parse a string into an unsigned long.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToULong(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
            Tries to parse a string into an unsigned long.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToFloat(System.String)">
            <summary>
            Tries to parse a string into a float.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToFloat(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
            Tries to parse a string into a float.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToDouble(System.String)">
            <summary>
            Tries to parse a string into a double.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToDouble(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
            Tries to parse a string into a double.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToDecimal(System.String)">
            <summary>
            Tries to parse a string into a decimal.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToDecimal(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
            Tries to parse a string into a decimal.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToBool(System.String)">
            <summary>
            Tries to parse a string into a bool.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToChar(System.String)">
            <summary>
            Tries to parse a string into a char.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToGuid(System.String)">
            <summary>
            Tries to parse a string into a guid.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToEnum``1(System.String)">
            <summary>
            Tries to parse a string into an enum.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToEnum``1(System.String,System.Boolean)">
            <summary>
            Tries to parse a string into an enum.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToDateTime(System.String)">
            <summary>
            Tries to parse a string into a datetime.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToDateTime(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Tries to parse a string into a datetime.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToDateTimeExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Tries to parse a string into a datetime with a specific format.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToDateTimeExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Tries to parse a string into a datetime with a specific format.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToTimeSpan(System.String)">
            <summary>
            Tries to parse a string into a timespan.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToTimeSpan(System.String,System.IFormatProvider)">
            <summary>
            Tries to parse a string into a timespan.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToTimeSpanExact(System.String,System.String,System.IFormatProvider)">
            <summary>
            Tries to parse a string into a timespan with a specific format.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToTimeSpanExact(System.String,System.String[],System.IFormatProvider)">
            <summary>
            Tries to parse a string into a timespan with a specific format.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToTimeSpanExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)">
            <summary>
            Tries to parse a string into a timespan with a specific format.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToTimeSpanExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
            <summary>
            Tries to parse a string into a timespan with a specific format.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToDateTimeOffset(System.String)">
            <summary>
            Tries to parse a string into a datetime offset.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToDateTimeOffset(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Tries to parse a string into a datetime offset.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToDateTimeOffsetExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Tries to parse a string into a datetime offset with a specific format.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="M:Optional.Utilities.Parse.ToDateTimeOffsetExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Tries to parse a string into a datetime offset with a specific format.
            </summary>
            <returns>An optional value containing the result if any.</returns>
        </member>
        <member name="T:Optional.Utilities.Safe">
            <summary>
            Utility functionality for catching and wrapping exceptions in an optional.
            </summary>
        </member>
        <member name="M:Optional.Utilities.Safe.Try``1(System.Func{``0})">
            <summary>
            Executes an operation safely, catching any potential
            exceptions and wrapping the result in an Option&lt;T&gt; instance.
            </summary>
            <param name="operation">The operation to perform.</param>
            <returns>An Option&lt;T&gt; instance containing the result or a caught exception.</returns>
        </member>
        <member name="M:Optional.Utilities.Safe.Try``2(System.Func{``0})">
            <summary>
            Executes an operation safely, catching any potential
            exceptions of the specified type and wrapping the result
            in an Option&lt;T&gt; instance.
            </summary>
            <param name="operation">The operation to perform.</param>
            <returns>An Option&lt;T&gt; instance containing the result or a caught exception.</returns>
        </member>
        <member name="M:Optional.Utilities.Safe.Try``3(System.Func{``0})">
            <summary>
            Executes an operation safely, catching any potential
            exceptions of one of the specified types and wrapping
            the result in an Option&lt;T&gt; instance.
            </summary>
            <param name="operation">The operation to perform.</param>
            <returns>An Option&lt;T&gt; instance containing the result or a caught exception.</returns>
        </member>
        <member name="M:Optional.Utilities.Safe.Try``4(System.Func{``0})">
            <summary>
            Executes an operation safely, catching any potential
            exceptions of one of the specified types and wrapping
            the result in an Option&lt;T&gt; instance.
            </summary>
            <param name="operation">The operation to perform.</param>
            <returns>An Option&lt;T&gt; instance containing the result or a caught exception.</returns>
        </member>
        <member name="M:Optional.Utilities.Safe.Try``5(System.Func{``0})">
            <summary>
            Executes an operation safely, catching any potential
            exceptions of one of the specified types and wrapping
            the result in an Option&lt;T&gt; instance.
            </summary>
            <param name="operation">The operation to perform.</param>
            <returns>An Option&lt;T&gt; instance containing the result or a caught exception.</returns>
        </member>
        <member name="M:Optional.Utilities.Safe.Try``6(System.Func{``0})">
            <summary>
            Executes an operation safely, catching any potential
            exceptions of one of the specified types and wrapping
            the result in an Option&lt;T&gt; instance.
            </summary>
            <param name="operation">The operation to perform.</param>
            <returns>An Option&lt;T&gt; instance containing the result or a caught exception.</returns>
        </member>
    </members>
</doc>
